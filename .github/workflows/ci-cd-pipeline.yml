# This workflow will do a clean installation of node dependencies, cache/restore them, build the source code and run tests across different versions of node
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-nodejs

name: ci-cd-pipeline
on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

jobs:
  build:

    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [18.x, 20.x, 22.x]
        # See supported Node.js release schedule at https://nodejs.org/en/about/releases/

    steps:
    - uses: actions/checkout@v4
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
    
    - name: Build React App
      run: npm run build --if-present
    
    # Docker Build Step (Add this below)
    - name: Build Docker Image
      run: docker build -t react-docker-app .

  deploy:
    runs-on: ubuntu-latest
    needs: build # Ensures deployment happens only after the build job succeeds

    steps:
    # 1. Checkout code again (needed for deploy)
    - uses: actions/checkout@v4

    # 2. Log in to Docker Hub
    - name: Log in to Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    # 3. Push Docker image to Docker Hub
    - name: Push Docker Image to Docker Hub
      run: docker push 27priyanshi/react-docker-app:latest

    # 4. Deploy Docker container on the server (Replace with your server IP/host)
    - name: Deploy Docker Container
      run: |
        ssh -o StrictHostKeyChecking=no user@your-server-ip 'docker pull 27priyanshi/react-docker-app:latest && docker run -d -p 3000:3000 27priyanshi/react-docker-app:latest'